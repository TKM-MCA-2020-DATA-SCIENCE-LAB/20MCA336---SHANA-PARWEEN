# -*- coding: utf-8 -*-
"""KERAS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fWnfkmt_HHDsNCECkyKM287v_EBwy6i-
"""

import keras
from keras.datasets import mnist 
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import SGD
from matplotlib import pyplot as plt

(x_train,y_train),(x_valid,y_valid) = mnist.load_data()

x_train.shape

type(x_train)

y_train.shape

y_train[0:12]

plt.figure(figsize=(5,5))
for k in range(20):
  plt.subplot(10,2,k+1)
  plt.imshow(x_train[k],cmap='Greys_r')
  plt.axis('off')
plt.show()

plt.figure(figsize=(5,5))
for k in range(20):
  plt.subplot(10,2,k+1)
  plt.imshow(x_train[k],cmap='Greys')
  plt.axis('off')
plt.show()

plt.figure(figsize=(5,5))
for k in range(20):
  plt.subplot(10,2,k+1)
  plt.imshow(x_train[k],cmap='Greys')
  plt.axis('on')
plt.show()

plt.imshow(x_valid[0],cmap='Greys')

y_valid.shape

x_valid[0]

y_valid[0]

"""**PREPROCESS DATA**"""

x_train = x_train.reshape(60000,784).astype('float32')
x_valid = x_valid.reshape(10000,784).astype('float32')

x_train /= 255
x_valid /= 255

x_valid[0]

x_train[0]

from keras import utils as np_utils
n_classes = 10
y_train = keras.utils.np_utils.to_categorical(y_train,n_classes)
y_valid = keras.utils.np_utils.to_categorical(y_valid,n_classes)

y_valid[0]

y_train[0]

x_valid[3]

y_valid[3]

plt.imshow(x_valid[3],cmap='Greys')

"""**BUILD A MODEL**"""

model = Sequential()

model.add(Dense(64, activation='sigmoid', input_shape=(784,)))

model.add(Dense(10, activation='softmax'))  #final layer

model.summary()

(64*784) #wi xi total weights at input

(64*784)+64

(10*64)

(10*64)+10

(64*784)+64 + (10*64)+10

model.compile(loss = 'mean_squared_error', optimizer=SGD(learning_rate=0.2),metrics=['accuracy'])

history=model.fit(x_train,y_train,batch_size=128,epochs=75,verbose=1)
#verbose=0 will show you nothing
#verbose = 1 will show an animated progress bar

plt.plot(history.history['accuracy'])
plt.title('accuracy vs epoch')
plt.ylabel('accuracy')
plt.xlabel('epoche')

plt.plot(history.history['loss'])
plt.title('loss vs epoch')
plt.ylabel('loss')
plt.xlabel('epoche')





