# -*- coding: utf-8 -*-
"""CO1_Q3(SEABORN).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vdUdkewnTgjSk5HcgyNZaMpMWNySy1kk
"""

import seaborn as sns

tips = sns.load_dataset('tips')
tips.head()

distplot:: it shows the distribution of a univariate set of observations.

sns.distplot(tips['tip'])

To remove the kde layer and just have the histogram use:

sns.distplot(tips['total_bill'],kde=False,bins=30)

sns.distplot(tips['total_bill'],kde=False,bins=100)

jointplot:: it allows you to basically match up two displots for bivariate data.With your choice of what "kind" parameter to compare with:
1. scatter
2. reg
3. resid
4. kde
5. hex

sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='kde')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='resid')

pairplot:: it will plot pairwise relationships across an entire dataframe(for the numerical columns) and supports a color hue argument (for categorical columns).

sns.pairplot(tips)

sns.pairplot(tips,hue='sex',palette='coolwarm')

rugplot:: these are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot.

sns.rugplot(tips['total_bill'])

CATEGORICAL DATA PLOTS:::
1. factorplot
2. boxplot
3. violinplot
4. stripplot
5. swarmplot
6. barplot
7. countplot

barplot and countplot:: These are similar plots allow you to get aggregate data off a categorical feature in your data. barplot is a general plot that allows you to aggregate the categorical data based off some function, by default the mean.

sns.barplot(x='sex',y='total_bill',data=tips)

import numpy as np

you can change the estimator object to your own function, that converts a vector to a scalar

sns.barplot(x='sex',y='total_bill',data=tips,estimator=np.std)

countplot:: this is essentially the same as barplot except the estimator is explicitly counting the number of occurences. Which is why we only pass the x value:

sns.countplot(x='sex',data=tips)

boxplot and violinplot:: these are used to shown the distribution of categorical data. A box plot(or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of a dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be "outliers" using a method that is a function of the inter_quartile range.

sns.boxplot(x="day",y="total_bill", data=tips,palette='rainbow')

#can do entire dataframe with orient ='h'
sns.boxplot(data=tips,palette='rainbow',orient='h')

sns.boxplot(x="day",y="total_bill", hue="smoker", data=tips, palette="coolwarm")

violinplot:: it plays a similar role as a box and whisker plot.It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components corresponds to actual datapoints, the violin plot features a kernel density estimation(kde) of the underlying distribution.

sns.violinplot(x="day",y="total_bill", data=tips,palette='rainbow')

sns.violinplot(x="day",y="total_bill", data=tips,hue ='sex',palette='Set1')

sns.violinplot(x="day",y="total_bill", data=tips,hue ='sex',split=True,palette='Set1')

stripplot::

sns.stripplot(x="day",y="total_bill", data=tips)

sns.stripplot(x="day",y="total_bill", data=tips,jitter=True)

sns.stripplot(x="day",y="total_bill", data=tips,jitter=True,hue ='sex',palette='Set1')

swarmplot::

sns.swarmplot(x="day",y="total_bill", data=tips)

sns.swarmplot(x="day",y="total_bill",hue='sex', data=tips, palette="Set1",split=True)

factorplot:: it is the most general form of a categorical plot. it can take in a "kind" parameter to adjust the plot type.

sns.factorplot(x='sex',y='total_bill',data=tips, kind='bar')