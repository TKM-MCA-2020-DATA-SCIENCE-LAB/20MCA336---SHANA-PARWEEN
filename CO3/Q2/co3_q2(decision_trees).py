# -*- coding: utf-8 -*-
"""CO3_Q2(Decision Trees).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z-j0O3m5697Gembb-Fzvg59SXxXa_fWK
"""

import pandas as pd
import numpy as np
from sklearn.datasets import load_iris

#load iris data
data = load_iris()

data.data.shape

print('classes to predict: ',data.target_names)
print('Features: ',data.feature_names)

x = data.data
y = data.target
display(x.shape, y.shape)

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

x_train, x_test, y_train, y_test = train_test_split(x,y,random_state = 50, test_size = 0.25)

#default criterion is GINI
classifier = DecisionTreeClassifier()
classifier.fit(x_train,y_train)

y_pred = classifier.predict(x_test)

from sklearn.metrics import accuracy_score
print('Accuracy on train data using Gini: ',accuracy_score(y_train,classifier.predict(x_train) ))
print('Accuracy on test data using Gini: ',accuracy_score(y_test,y_pred))

#change criterion to entropy
classifier_entropy = DecisionTreeClassifier(criterion='entropy')
classifier_entropy.fit(x_train,y_train)
y_pred_entropy = classifier_entropy.predict(x_test)
print('Accuracy on train data using Gini: ',accuracy_score(y_train,classifier_entropy.predict(x_train) ))
print('Accuracy on test data using Gini: ',accuracy_score(y_test,y_pred_entropy))

#change criterion to entropy with min_samples_split to 50. Default value is 2.
classifier_entropy1 = DecisionTreeClassifier(criterion = 'entropy', min_samples_split=50) #min_samples_split.min_samples_split represents
                                                                                          #the minimum no:of samples required to split an internal node
classifier_entropy1.fit(x_train,y_train)
y_pred_entropy1 = classifier_entropy1.predict(x_test)
print('Accuracy on train data using entropy: ',accuracy_score(y_true = y_train,y_pred = classifier_entropy1.predict(x_train) ))
print('Accuracy on test data using entropy: ',accuracy_score(y_true = y_test,y_pred = y_pred_entropy1))

#visualize the decision tree

from sklearn.tree import export_graphviz  #for visualization
from six import StringIO   #python 2,3 compatibility package, when the stringIO object is created
                           #it is initialised by passing a string to the constructor. If no string is passed the stringIO will empty.
from IPython.display import Image   #Ipython is an interactive shell that is built with python
import pydotplus    #python interface to Graphviz's Dot language

dot_data = StringIO()
export_graphviz(classifier, out_file = dot_data, filled = True, rounded = True, special_characters = True, feature_names = data.feature_names, class_names = data.target_names)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

dot_data = StringIO()
export_graphviz(classifier_entropy, out_file = dot_data, filled = True, impurity = True, rounded = True, special_characters = True, feature_names = data.feature_names, class_names = data.target_names)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

dot_data = StringIO()
export_graphviz(classifier_entropy1, out_file = dot_data, filled = True, rounded = True, special_characters = True, feature_names = data.feature_names, class_names = data.target_names)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())